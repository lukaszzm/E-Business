/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout.index'
import { Route as LayoutProductsImport } from './routes/_layout.products'
import { Route as LayoutCartImport } from './routes/_layout.cart'
import { Route as LayoutProductIdImport } from './routes/_layout.$productId'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProductsRoute = LayoutProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCartRoute = LayoutCartImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProductIdRoute = LayoutProductIdImport.update({
  id: '/$productId',
  path: '/$productId',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/$productId': {
      id: '/_layout/$productId'
      path: '/$productId'
      fullPath: '/$productId'
      preLoaderRoute: typeof LayoutProductIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/cart': {
      id: '/_layout/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof LayoutCartImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/products': {
      id: '/_layout/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof LayoutProductsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutProductIdRoute: typeof LayoutProductIdRoute
  LayoutCartRoute: typeof LayoutCartRoute
  LayoutProductsRoute: typeof LayoutProductsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutProductIdRoute: LayoutProductIdRoute,
  LayoutCartRoute: LayoutCartRoute,
  LayoutProductsRoute: LayoutProductsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/$productId': typeof LayoutProductIdRoute
  '/cart': typeof LayoutCartRoute
  '/products': typeof LayoutProductsRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '/$productId': typeof LayoutProductIdRoute
  '/cart': typeof LayoutCartRoute
  '/products': typeof LayoutProductsRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/$productId': typeof LayoutProductIdRoute
  '/_layout/cart': typeof LayoutCartRoute
  '/_layout/products': typeof LayoutProductsRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/$productId' | '/cart' | '/products' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/$productId' | '/cart' | '/products' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/$productId'
    | '/_layout/cart'
    | '/_layout/products'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/$productId",
        "/_layout/cart",
        "/_layout/products",
        "/_layout/"
      ]
    },
    "/_layout/$productId": {
      "filePath": "_layout.$productId.tsx",
      "parent": "/_layout"
    },
    "/_layout/cart": {
      "filePath": "_layout.cart.tsx",
      "parent": "/_layout"
    },
    "/_layout/products": {
      "filePath": "_layout.products.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
